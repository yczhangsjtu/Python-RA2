#! This file is generated by ChatGPT and is not
#  working for now. Need going through and revision.

import struct

MAX_FILE_NAME = 256

BYTE = 1
WORD = 2
LONGINT = 4

class Color:
    def __init__(self):
        self.c = [0] * 4

class FileHeader:
    def __init__(self):
        self.check = 0
        self.width = 0
        self.height = 0
        self.num = 0

class ImageHeader:
    def __init__(self):
        self.x = 0
        self.y = 0
        self.w = 0
        self.h = 0
        self.compression = 0
        self.align = [0] * 3
        self.transparent = Color()
        self.zero = 0
        self.offset = 0

class ImageData:
    def __init__(self):
        self.header = ImageHeader()
        self.data = None

class Image:
    def __init__(self):
        self.w = 0
        self.h = 0
        self.data = None

def allocImageData(imageData):
    size = imageData.header.w * imageData.header.h
    imageData.data = [0] * size

def decompress1(dst, src, w, h):
    dst[:w*h] = src[:w*h]

def decompress2(dst, src, w, h):
    pass

def decompress3(dst, src, w, h):
    psrc = src
    pdst = dst
    v = 0
    pos = 0
    count = 0
    x = 0
    y = 0
    i = 0
    for y in range(h):
        pos = struct.unpack('<H', psrc)[0]
        count = pos - 2
        psrc += 2
        x = 0
        for i in range(count):
            v = psrc[0]
            psrc += 1
            if v:
                pdst[0] = v
                pdst += 1
                x += 1
            else:
                v = psrc[0]
                psrc += 1
                i += 1
                while v > 0 and x < w:
                    pdst[0] = 0
                    pdst += 1
                    x += 1
                    v -= 1

defaultPalatte = [
	(0x00,0x00,0x00), (0x2a,0x00,0x2a), (0x00,0x2a,0x2a), (0x00,0x2a,0x00),
	(0x15,0x3f,0x15), (0x3f,0x3f,0x15), (0x3f,0x15,0x15), (0x2a,0x15,0x00),
	(0x2a,0x00,0x00), (0x15,0x3f,0x3f), (0x14,0x14,0x3f), (0x00,0x00,0x2a),
	(0x00,0x00,0x00), (0x15,0x15,0x15), (0x2a,0x2a,0x2a), (0x3f,0x3f,0x3f),
	(0x3f,0x00,0x00), (0x3b,0x00,0x00), (0x37,0x00,0x00), (0x34,0x00,0x00),
	(0x30,0x00,0x00), (0x2c,0x00,0x00), (0x29,0x00,0x00), (0x25,0x00,0x00),
	(0x21,0x00,0x00), (0x1e,0x00,0x00), (0x1a,0x00,0x00), (0x16,0x00,0x00),
	(0x13,0x00,0x00), (0x0f,0x00,0x00), (0x0b,0x00,0x00), (0x08,0x00,0x00),
	(0x3f,0x3f,0x3f), (0x3d,0x3d,0x3d), (0x3b,0x3b,0x3b), (0x38,0x38,0x38),
	(0x36,0x36,0x36), (0x34,0x34,0x34), (0x32,0x32,0x32), (0x30,0x30,0x30),
	(0x2e,0x2e,0x2e), (0x2c,0x2c,0x2c), (0x2a,0x2a,0x2a), (0x28,0x28,0x28),
	(0x26,0x26,0x26), (0x24,0x24,0x24), (0x22,0x22,0x22), (0x20,0x20,0x20),
	(0x1e,0x1e,0x1e), (0x1c,0x1c,0x1c), (0x1a,0x1a,0x1a), (0x18,0x18,0x18),
	(0x15,0x15,0x15), (0x13,0x13,0x13), (0x11,0x11,0x11), (0x0f,0x0f,0x0f),
	(0x0d,0x0d,0x0d), (0x0b,0x0b,0x0b), (0x09,0x09,0x09), (0x07,0x07,0x07),
	(0x05,0x05,0x05), (0x03,0x03,0x03), (0x01,0x01,0x01), (0x00,0x00,0x00),
	(0x34,0x34,0x2e), (0x31,0x31,0x2b), (0x2e,0x2e,0x28), (0x2b,0x2b,0x25),
	(0x28,0x28,0x22), (0x25,0x25,0x1f), (0x22,0x22,0x1c), (0x1f,0x1f,0x19),
	(0x1c,0x1c,0x16), (0x19,0x19,0x13), (0x16,0x16,0x10), (0x13,0x13,0x0d),
	(0x10,0x10,0x0a), (0x0d,0x0d,0x07), (0x0a,0x0a,0x04), (0x07,0x07,0x01),
	(0x37,0x37,0x3d), (0x34,0x34,0x3a), (0x31,0x31,0x37), (0x2e,0x2e,0x34),
	(0x2b,0x2b,0x31), (0x28,0x28,0x2e), (0x25,0x25,0x2b), (0x22,0x22,0x28),
	(0x1f,0x1f,0x25), (0x1c,0x1c,0x22), (0x19,0x19,0x1f), (0x16,0x16,0x1c),
	(0x13,0x13,0x19), (0x10,0x10,0x16), (0x0d,0x0d,0x13), (0x0a,0x0a,0x10),
	(0x3b,0x2f,0x2b), (0x38,0x2c,0x28), (0x35,0x29,0x25), (0x32,0x26,0x22),
	(0x2f,0x23,0x1f), (0x2c,0x20,0x1c), (0x29,0x1d,0x19), (0x26,0x1a,0x16),
	(0x23,0x17,0x13), (0x20,0x14,0x10), (0x1d,0x11,0x0d), (0x1a,0x0e,0x0a),
	(0x17,0x0b,0x07), (0x14,0x08,0x04), (0x11,0x05,0x01), (0x0d,0x01,0x00),
	(0x22,0x20,0x16), (0x20,0x1e,0x15), (0x1e,0x1d,0x14), (0x1d,0x1b,0x13),
	(0x1c,0x1a,0x12), (0x1a,0x18,0x11), (0x18,0x16,0x10), (0x16,0x14,0x0f),
	(0x14,0x12,0x0e), (0x12,0x10,0x0c), (0x0e,0x0e,0x0a), (0x0c,0x0c,0x09),
	(0x0b,0x0b,0x08), (0x0a,0x0a,0x07), (0x08,0x08,0x05), (0x06,0x06,0x03),
	(0x35,0x2f,0x1e), (0x33,0x2d,0x1c), (0x31,0x2b,0x1c), (0x2f,0x29,0x1a),
	(0x2b,0x27,0x1a), (0x29,0x25,0x18), (0x27,0x23,0x16), (0x25,0x21,0x14),
	(0x23,0x1e,0x14), (0x21,0x1c,0x12), (0x1e,0x1a,0x10), (0x1c,0x18,0x0f),
	(0x1a,0x18,0x12), (0x19,0x17,0x11), (0x18,0x16,0x10), (0x17,0x15,0x10),
	(0x2f,0x24,0x0f), (0x2c,0x23,0x0e), (0x29,0x21,0x0e), (0x26,0x1e,0x0e),
	(0x23,0x1c,0x0e), (0x21,0x1b,0x0e), (0x1e,0x19,0x0e), (0x1c,0x17,0x0c),
	(0x1b,0x16,0x0b), (0x1a,0x15,0x0b), (0x19,0x14,0x0a), (0x18,0x13,0x0a),
	(0x17,0x12,0x0a), (0x16,0x12,0x0a), (0x15,0x11,0x0a), (0x13,0x10,0x0a),
	(0x11,0x0e,0x09), (0x0f,0x0d,0x08), (0x0d,0x0b,0x08), (0x0b,0x09,0x07),
	(0x0a,0x08,0x07), (0x09,0x07,0x07), (0x08,0x07,0x07), (0x06,0x06,0x06),
	(0x22,0x2f,0x1d), (0x1d,0x2b,0x18), (0x18,0x27,0x13), (0x14,0x24,0x0f),
	(0x11,0x20,0x0b), (0x0d,0x1d,0x08), (0x0a,0x19,0x05), (0x08,0x16,0x03),
	(0x3f,0x3f,0x1c), (0x3f,0x3d,0x1b), (0x3f,0x3a,0x1a), (0x3f,0x38,0x19),
	(0x3f,0x36,0x18), (0x3f,0x34,0x18), (0x3f,0x30,0x16), (0x3d,0x2d,0x14),
	(0x3b,0x2b,0x12), (0x39,0x25,0x0c), (0x35,0x1e,0x04), (0x31,0x18,0x00),
	(0x2d,0x12,0x00), (0x29,0x0e,0x00), (0x26,0x0a,0x00), (0x22,0x06,0x00),
	(0x2c,0x2c,0x3f), (0x25,0x25,0x39), (0x1f,0x1f,0x33), (0x1a,0x1a,0x2d),
	(0x15,0x15,0x27), (0x10,0x10,0x21), (0x0c,0x0c,0x1b), (0x09,0x09,0x16),
	(0x3f,0x00,0x00), (0x34,0x00,0x00), (0x29,0x00,0x00), (0x1f,0x00,0x00),
	(0x3f,0x00,0x3f), (0x3f,0x00,0x3f), (0x3f,0x00,0x3f), (0x3f,0x00,0x3f),
	(0x37,0x3d,0x3f), (0x34,0x3b,0x3e), (0x33,0x39,0x3d), (0x30,0x37,0x3d),
	(0x2e,0x35,0x3c), (0x2c,0x33,0x3b), (0x2a,0x31,0x3b), (0x28,0x2f,0x3a),
	(0x27,0x2c,0x39), (0x25,0x2a,0x39), (0x22,0x26,0x34), (0x1f,0x23,0x30),
	(0x1c,0x20,0x2b), (0x19,0x1c,0x27), (0x16,0x19,0x22), (0x13,0x16,0x1e),
	(0x39,0x3c,0x3f), (0x35,0x39,0x3d), (0x32,0x36,0x3b), (0x2f,0x34,0x39),
	(0x2b,0x31,0x37), (0x28,0x2f,0x35), (0x26,0x2d,0x33), (0x23,0x2b,0x31),
	(0x21,0x29,0x31), (0x1e,0x28,0x2f), (0x1c,0x27,0x2e), (0x1a,0x25,0x2d),
	(0x18,0x24,0x2c), (0x15,0x23,0x2b), (0x14,0x22,0x2a), (0x12,0x21,0x29),
	(0x3f,0x3f,0x3f), (0x31,0x31,0x32), (0x28,0x28,0x29), (0x20,0x20,0x21),
	(0x18,0x18,0x19), (0x00,0x32,0x00), (0x3f,0x3f,0x00), (0x3f,0x2f,0x00),
	(0x3f,0x1f,0x00), (0x3f,0x00,0x00), (0x2f,0x00,0x00), (0x33,0x33,0x3f),
	(0x26,0x26,0x3f), (0x19,0x19,0x3f), (0x00,0x00,0x3f), (0x3f,0x3f,0x3f),
]

def load(input, palatte):
    assert BYTE == 1 and WORD == 2 and LONGINT == 4

    output = None
    i = 1
    imageSize = 0
    d = 0
    s = 0
    k = 0
    j = 0
    x = 0
    y = 0
    w = 0
    h = 0
    file = None
    fileHeader = FileHeader()
    pImageHeader = None
    imageDatas = None
    imageData = None

    with open(palatte, "rb") as file:
        defaultPalatte[:] = struct.unpack(f"{3 * BYTE}B", file.read(3 * BYTE))

    with open(input, "rb") as file:
        fileHeader = FileHeader(*struct.unpack("<2H2H", file.read(struct.calcsize("<2H2H"))))

        if fileHeader.check:
            raise Exception("Check nonzero. This is not a valid file.")

        imageDatas = [ImageData() for _ in range(fileHeader.num)]
        pImageHeader = [ImageHeader() for _ in range(fileHeader.num)]

        for i in range(fileHeader.num):
            imageDatas[i].header = pImageHeader[i]
            pImageHeader[i] = ImageHeader(*struct.unpack("<4H6B4I", file.read(struct.calcsize("<4H6B4I"))))

            if pImageHeader[i].compression > 3:
                raise Exception("Invalid compression mode.")

            imageSize += pImageHeader[i].w * pImageHeader[i].h
            if pImageHeader[i].compression == 1:
                imageData = bytearray(pImageHeader[i].w * pImageHeader[i].h)
                file.readinto(imageData)
                decompress1(imageDatas[i].data, imageData, pImageHeader[i].w, pImageHeader[i].h)
            elif pImageHeader[i].compression == 2:
                imageData = bytearray(pImageHeader[i].w * pImageHeader[i].h)
                file.readinto(imageData)
                decompress2(imageDatas[i].data, imageData, pImageHeader[i].w, pImageHeader[i].h)
            elif pImageHeader[i].compression == 3:
                imageData = bytearray(pImageHeader[i].zero)
                file.readinto(imageData)
                decompress3(imageDatas[i].data, imageData, pImageHeader[i].w, pImageHeader[i].h)

        output = Image()
        output.w = fileHeader.width
        output.h = fileHeader.height
        output.data = bytearray(output.w * output.h)
        for i in range(fileHeader.num):
            for y in range(pImageHeader[i].h):
                for x in range(pImageHeader[i].w):
                    d = (y + pImageHeader[i].y) * output.w + x + pImageHeader[i].x
                    s = y * pImageHeader[i].w + x
                    output.data[d] = imageDatas[i].data[s]
        return output, fileHeader.num

def save(input, output, palatte):
    assert BYTE == 1 and WORD == 2 and LONGINT == 4

    fileHeader = FileHeader()
    fileHeader.check = 0
    fileHeader.width = input.w
    fileHeader.height= input.h
    fileHeader.num = 1
    pImageHeader = ImageHeader()
    pImageHeader.x = 0
    pImageHeader.y = 0
    pImageHeader.w = input.w
    pImageHeader.h = input.h
    pImageHeader.compression = 1
    pImageHeader.align = [0] * 3
    pImageHeader.transparent.c = [0] * 4
    pImageHeader.zero = 0
    pImageHeader.offset = 0
    imageData = ImageData()
    imageData.header = pImageHeader
    imageData.data = input.data

    with open(output, "wb") as file:
        file.write(struct.pack("<2H2H", fileHeader.check, fileHeader.width, fileHeader.height, fileHeader.num))
        file.write(struct.pack("<4H6B4I", pImageHeader.x, pImageHeader.y, pImageHeader.w, pImageHeader.h, pImageHeader.compression, pImageHeader.align[0], pImageHeader.align[1], pImageHeader.align[2], pImageHeader.transparent.c[0], pImageHeader.transparent.c[1], pImageHeader.transparent.c[2], pImageHeader.transparent.c[3], pImageHeader.zero, pImageHeader.offset))
        file.write(bytes(imageData.data))

    with open(palatte, "wb") as file:
        file.write(struct.pack(f"{3 * BYTE}B", *[color for colors in defaultPalatte for color in colors]))

def main():
    input = load("input.bmp", "palatte.bmp", [0])
    save(input, "output.bmp", "palatte.bmp")

if __name__ == "__main__":
    main()
